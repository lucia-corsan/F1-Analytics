{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        " #Get data\n",
        "import requests\n",
        "\n",
        "#Process data\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from datetime import datetime\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.utils import shuffle\n",
        "from sklearn.decomposition import PCA\n",
        "\n",
        "\n",
        "#Plots\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from mpl_toolkits.mplot3d import Axes3D\n",
        "\n",
        "#Grafos\n",
        "import networkx as nx\n",
        "\n",
        "#ML\n",
        "from sklearn.metrics import precision_score\n",
        "from sklearn.metrics import mean_squared_error\n",
        "\n",
        "from sklearn.cluster import KMeans\n",
        "\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.neural_network import MLPClassifier\n",
        "from statsmodels.tsa.arima.model import ARIMA\n",
        "from sklearn.tree import DecisionTreeClassifier"
      ],
      "metadata": {
        "id": "_crM_d6kyfrH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import warnings\n",
        "from sklearn.exceptions import UndefinedMetricWarning\n",
        "\n",
        "# Suppress UndefinedMetricWarning for precision\n",
        "warnings.filterwarnings(\"ignore\", category=UndefinedMetricWarning)"
      ],
      "metadata": {
        "id": "hVm6Ru20S9JL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DNEFUm1mnLfi",
        "outputId": "d08bde65-bdcc-4328-b372-aadc821f8767"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "During the development of this lab, the codes for the data generation process are available. In order to save time, we have attached these datasets already generated. In order to run the remaining part of the notebook, you just need to specify where those files are located in your local host and avoid running the cells related to data generation, which will be specified during the notebook.\n",
        "\n",
        "Some of these datasets generated are not used in the notebook itself but in the dashboards, that will be provided to the professor via mail."
      ],
      "metadata": {
        "id": "imF0hFyu-n61"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Insert your path\n",
        "path2='/content/drive/MyDrive/finalProjectAW/'"
      ],
      "metadata": {
        "id": "2drV7ZXhnO3c"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Tiempo por vuelta Monaco,Monza,Silverstone\n",
        "\n",
        "This is not a database itself, you just gather pole position times and represent them inside the notebook, so this part of the code should be executed always"
      ],
      "metadata": {
        "id": "6dBJqXCNrHtc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "qMonaco = []\n",
        "qMonza = []\n",
        "qSilverstone = []\n",
        "\n",
        "for year in range(1950,2024):\n",
        "  # It constructs a URL to fetch the qualifying data for the first race\n",
        "    request = f'http://ergast.com/api/f1/{year}/qualifying/1.json'\n",
        "    response = requests.get(request)\n",
        "\n",
        "    # For each race in the response, it iterates through the races.\n",
        "    for i in range(len(response.json()['MRData']['RaceTable']['Races'])):\n",
        "      # Checks if the current race is held at Monaco, Monza, or Silverstone based on the circuitId.\n",
        "      if response.json()['MRData']['RaceTable']['Races'][i]['Circuit']['circuitId'] == 'monaco':\n",
        "        # If 'Q3' is available in the qualifying results, it appends a tuple containing the season and the Q3 time to the respective circuit's list (qMonaco, qMonza, or qSilverstone).\n",
        "        if 'Q3' in response.json()['MRData']['RaceTable']['Races'][i]['QualifyingResults'][0]:\n",
        "          qMonaco.append(tuple((response.json()['MRData']['RaceTable']['Races'][i]['season'],response.json()['MRData']['RaceTable']['Races'][i]['QualifyingResults'][0]['Q3'])))\n",
        "        #  If 'Q3' is not available, it appends a tuple containing the season and the Q1 time.\n",
        "        #  Before 2006, only Q1 existed. Later, Q2 and Q3 were added.\n",
        "        else:\n",
        "          qMonaco.append(tuple((response.json()['MRData']['RaceTable']['Races'][i]['season'],response.json()['MRData']['RaceTable']['Races'][i]['QualifyingResults'][0]['Q1'])))\n",
        "\n",
        "      if response.json()['MRData']['RaceTable']['Races'][i]['Circuit']['circuitId'] == 'monza':\n",
        "        if 'Q3' in response.json()['MRData']['RaceTable']['Races'][i]['QualifyingResults'][0]:\n",
        "            qMonza.append(tuple((response.json()['MRData']['RaceTable']['Races'][i]['season'],response.json()['MRData']['RaceTable']['Races'][i]['QualifyingResults'][0]['Q3'])))\n",
        "        else:\n",
        "            qMonza.append(tuple((response.json()['MRData']['RaceTable']['Races'][i]['season'],response.json()['MRData']['RaceTable']['Races'][i]['QualifyingResults'][0]['Q1'])))\n",
        "\n",
        "\n",
        "      if response.json()['MRData']['RaceTable']['Races'][i]['Circuit']['circuitId'] == 'silverstone':\n",
        "        if 'Q3' in response.json()['MRData']['RaceTable']['Races'][i]['QualifyingResults'][0]:\n",
        "            qSilverstone.append(tuple((response.json()['MRData']['RaceTable']['Races'][i]['season'],response.json()['MRData']['RaceTable']['Races'][i]['QualifyingResults'][0]['Q3'])))\n",
        "        else:\n",
        "            qSilverstone.append(tuple((response.json()['MRData']['RaceTable']['Races'][i]['season'],response.json()['MRData']['RaceTable']['Races'][i]['QualifyingResults'][0]['Q1'])))\n",
        "\n"
      ],
      "metadata": {
        "id": "-01UkGw4dtqN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Once the information is collected, times are converted into seconds and the data for all circuits are created"
      ],
      "metadata": {
        "id": "wT-CDMKB_0lj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Initialize an empty list to store the calculated times\n",
        "\n",
        "timeSMonza = []\n",
        "# Iterate through the list of qualifying data for Monza\n",
        "for j in range(len(qMonza)):\n",
        "  # Split the qualifying time string into minutes, seconds, and milliseconds\n",
        "  a = qMonza[j][1].split(':')\n",
        "  b = a[1].split('.')\n",
        "  # Calculate the total time in seconds and append it to the list\n",
        "  timeSMonza.append(int(a[0])*60 + int(b[0]) + int(b[1])/1000)\n",
        "\n",
        "# Unzip the years from the original qualifying data for Monza\n",
        "años, _ = zip(*qMonza)\n",
        "# Create a dictionary to store the extracted data\n",
        "datos_dict = {'Año': años, 'Tiempo ': timeSMonza}\n",
        "monza = pd.DataFrame(datos_dict)\n",
        "\n",
        "timeSMonaco = []\n",
        "for j in range(len(qMonaco)):\n",
        "  a = qMonaco[j][1].split(':')\n",
        "  b = a[1].split('.')\n",
        "  timeSMonaco.append(int(a[0])*60 + int(b[0]) + int(b[1])/1000)\n",
        "\n",
        "años, _ = zip(*qMonaco)\n",
        "datos_dict = {'Año': años, 'Tiempo ': timeSMonaco}\n",
        "monaco = pd.DataFrame(datos_dict)\n",
        "\n",
        "timeSSilverstone = []\n",
        "for j in range(len(qSilverstone)):\n",
        "  a = qSilverstone[j][1].split(':')\n",
        "  b = a[1].split('.')\n",
        "  timeSSilverstone.append(int(a[0])*60 + int(b[0]) + int(b[1])/1000)\n",
        "\n",
        "años, _ = zip(*qSilverstone)\n",
        "datos_dict = {'Año': años, 'Tiempo ': timeSSilverstone}\n",
        "silverstone = pd.DataFrame(datos_dict)"
      ],
      "metadata": {
        "id": "PpWV53UJi7Dv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Reresentation of the temporal series\n",
        "# Merge the DataFrames for Monza, Monaco, and Silverstone based on the 'Año' (Year) column\n",
        "merged_df = pd.merge(monza, monaco, on='Año', suffixes=('Monza', 'Monaco'))\n",
        "final_df = pd.merge(merged_df, silverstone, on='Año', suffixes=('_merged', 'Silverstone'))\n",
        "\n",
        "plt.figure(figsize=(20, 6))\n",
        "# Plotting the line graph for Monza, Monaco and Silverstone's qualifying times over the years\n",
        "sns.lineplot(data=final_df, x='Año', y='Tiempo Monza', label='Monza', marker='o')\n",
        "sns.lineplot(data=final_df, x='Año', y='Tiempo Monaco', label='Monaco', marker='o')\n",
        "sns.lineplot(data=final_df, x='Año', y='Tiempo ', label='Silverstone', marker='o')\n",
        "\n",
        "plt.title('Pole position evolution')\n",
        "plt.xlabel('Año')\n",
        "plt.ylabel('Tiempo por vuelta (segundos)')\n",
        "plt.grid(True)\n",
        "plt.legend(title='DataFrames')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "J6Yp0M1UqDnK",
        "outputId": "8eb7772a-f14f-4c03-d652-78a4f6c1144c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x600 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABlkAAAIjCAYAAACAmH1iAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdd1yVdf/H8dc5cNjDLQ6Ge+PIPUJBc5SVWZma5mzv+lV306btum2o5a4szdS673KCW3Pj3iI4UFzIhgPn/P4gzh0JBQpcjPfz8eAR57qu873e5wsV8Dnfz9dkt9vtiIiIiIiIiIiIiIiISKGYjQ4gIiIiIiIiIiIiIiJSFqnIIiIiIiIiIiIiIiIicg1UZBEREREREREREREREbkGKrKIiIiIiIiIiIiIiIhcAxVZREREREREREREREREroGKLCIiIiIiIiIiIiIiItdARRYREREREREREREREZFroCKLiIiIiIiIiIiIiIjINVCRRURERERERERERERE5BqoyCIiIiIiUoH07NmTnj17Gh3juqxevRqTycTq1av/8doTJ05gMpmYNWtWsecqLWbNmoXJZOLEiRNFOm55+N4RERERESlqKrKIiIiIiJRiOX8wz/lwc3OjcePGPProo5w7d87oeKXG3Llz+fTTT42OUebt37+fCRMmFHmBRkRERESkvHI2OoCIiIiIiPyzN954g3r16pGWlsb69euZPHkyv/32G3v37sXDw8PoeCXqxhtvJDU1FRcXF8exuXPnsnfvXp588slc1wYGBpKamorFYinhlGXT/v37ef311+nZsydBQUG5zi1fvtyYUCIiIiIipZiKLCIiIiIiZUD//v1p3749AOPGjaNq1ap8/PHH/PzzzwwdOtTgdCXLbDbj5uZWoGtzVv/I9ftzUUtERERERLKpXZiIiIiISBkUGhoKQFRUFACZmZm8+eabNGjQAFdXV4KCgnjxxRdJT0//x7HS09N57bXXaNiwIa6urvj7+/Pcc88V6Lk9e/akZcuWbN++na5du+Lu7k69evWYMmXKVdfGxcUxduxYatasiZubG61bt2b27NlXXffDDz9www034O3tjY+PD61ateLf//634/xf92Tp2bMnv/76K9HR0Y62ajmrMPLbkyUiIoIePXrg6elJpUqVuO222zhw4ECuayZMmIDJZOLo0aOMGjWKSpUq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AxVZREREREREREREREREroGKLCIiIiIiIiIiIiIiItdAe7KIiIiIiIiIiIiIiIhcA61kERERERERERERERERuQYqsoiIiIiIiIiIiIiIiFwDZ6MDlAY2m40zZ87g7e2NyWQyOo6IiIiIiIiIiIiIiBjIbreTmJhI7dq1MZvzX6+iIgtw5swZ/P39jY4hIiIiIiIiIiIiIiKlyMmTJ6lbt26+51VkAby9vYHsyfLx8TE4TelhtVpZvnw5N910ExaLxeg4pYrmJm+al/xpbvKmecmf5iZvmpe8aV7yp7nJm+Ylf5qbvGle8qe5yZvmJX+am7xpXvKnucmb5iVvmpf8aW7ypnnJX0JCAv7+/o76QX5UZAFHizAfHx8VWf7EarXi4eGBj4+P/gX7C81N3jQv+dPc5E3zkj/NTd40L3nTvORPc5M3zUv+NDd507zkT3OTN81L/jQ3edO85E9zkzfNS940L/nT3ORN8/LP/mmLEW18LyIiIiIiIiIiIiIicg1UZBEREREREREREREREbkGKrKIiIiIiIiIiIiIiIhcA+3JIiIiIiIiIiIiIiIVmt1uJzMzk6ysLKOjlCir1YqzszNpaWkV7rU7OTnh7Oz8j3uu/BMVWURERERERERERESkwsrIyCA2NpaUlBSjo5Q4u92On58fJ0+evO5iQ1nk4eFBrVq1cHFxueYxVGQRERERERERERERkQrJZrMRFRWFk5MTtWvXxsXFpUIVG2w2G0lJSXh5eWE2V5zdRex2OxkZGZw/f56oqCgaNWp0za9fRRYRERERERERERERqZAyMjKw2Wz4+/vj4eFhdJwSZ7PZyMjIwM3NrUIVWQDc3d2xWCxER0c75uBaVKxZExERERERERERERH5i4pWYJBsRfF113eOiIiIiIiIiIiIiIjINVCRRURERERERERERERE5BqoyCIiIiIiIiIiIiIiInINVGQRERERERERERERESkmo0aNwmQyYTKZsFgs1KxZkz59+jBjxgxsNluBx5k1axaVKlUq9P1PnDjhuP+fP+69995CjyVXczY6gIiIiIiIiIiIiIhIedavXz9mzpxJVlYW586dY+nSpTzxxBMsWLCAX375BWfn4v9T/cqVK2nRooXjsbu7+1XX2O12srKySiRPeaGVLCIiIiIiIn/i7e1tdAQRERERKWdcXV3x8/OjTp06tGvX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b6Zatf+tsj527BhWq5Vu3br97zYWCx07duTAgQO5xgoODnZ8XqtWLQDi4uIICAggKSmJCRMm8OuvvxIbG0tmZiapqanExMQAEBkZiZOTEyEhIXnmPHDgAF26dMn183m3bt1ISkri1KlTZXYPGRVZRERERESkXMnIymDNqTVA8bUKyxEaEMq/d/ybzbGbScxIxNvFu1jvJyIiIiIlwGQqXMuujBTo9ED2Hix/1ekByMosdAuwwhozZgyPPvooAF988cU1j2OxWByf5xRDclaZPPvss6xYsYIPP/yQhg0b4u7uzp133klGRgYA7u7u13zfskztwkREREREpFzZdGYTydZkanjUoFW1VsV6r/q+9QnyCSLTlsn60+uL9V4iIiIiUkq5eECPpyHk+eyVK5D9z5Dns4+7FH51SmH169ePjIwMrFYrffv2zXWuQYMGuLi4OPZWAbBarWzdupXmzQveWnfDhg2MGjWKQYMG0apVK/z8/Dhx4oTjfKtWrbDZbKxZsybP5zdr1oxNmzZht9tzjent7U3dunULnKO0UZFFRERERETKlZxWYX0C+2A2Ff+vPGEBYQCEx4QX+71EREREpJRydoNuT8L/HYH/O5b9z25PZB8vAU5OThw4cID9+/fj5OSU65ynpycPPfQQ//d//8fSpUvZv38/48ePJyUlhTFjxhT4Ho0aNWLhwoVERkaya9cuhg0blmsvlaCgIO677z7GjBnD4sWLiYqKYvXq1cyfPx+Ahx9+mJMnT/LYY49x8OBBfv75Z1577TWefvppzOayW6oou8lFRERERET+wppldWxC3yeweFuF5cgpsqw7tY70rPQSuaeIiIiIlEIuHuDkAp7Vsv9ZzC3C/srHxwcfH588z7377rsMHjyYESNG0K5dO44ePcqyZcuoXLlygcf/+OOPqVy5Ml27dmXgwIH07duXdu3a5bpm8uTJ3HnnnTz88MM0bdqU8ePHk5ycDECdOnX47bff2LJlC61bt+bBBx9k7NixvPzyy9f+oksB7ckiIiIiIiLlxpazW0jMSKSqW1XaVG9TIvdsUa0FNdxrEJcax+bYzdxY98YSua+IiIiIVGyzZs362/OLFy92fO7m5sakSZOYNGlSrmtyVqL07NkzVxsvgDZt2uQ6FhQURERERK5rHnnkkVyP3dzc+Pjjj/n444/zzBQSEsKWLVv+NndZ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IiKlWnloFZajceXG1PGqQ3pWOpvObDI6joiIiIiIXCcVWUREREREpNS6kn6FzbGbgbLfKgzAZDIRGhAKqGWYiIiIiEh5oCKLiIiIiIiUWmtOrSHTlknDSg2p51vP6DhFIqdl2OpTq7HarAanERERERGR66Eii4iIiIiIlForolcAcFPgTQYnKTptqrehilsVEjMS2X5uu9FxRERERETkOqjIIiIiIiIipVJSRhIbT28EykersBxOZid6+vcEIDxaLcNERERERMoyFVlERERERKRUWntqLRm2DIJ8gmhYqaHRcYpUTsuwiJMR2Ow2g9OIiIiIiMi1UpFFRERERERKpZUxKwHoE9gHk8lkcJqi1alWJzycPYhLiWP/xf1GxxERERERkWukIouIiIiIiJQ6KdYU1p1aB2QXWcobVydXutfpDkB4jFqGiYiIiIiUVSqyiIiIiIhIqbP+9HrSstKo61WXplWaGh2nWOS0DFORRURERESk7FKRRURERERESp2V0X+0Cgsqf63CcvSo2wNnszNRV6I4fuW40XFEREREROQaqMgiIiIiIiKlSlpmGmtOrQGgT0D5axWWw9vFm05+nQCIiIkwOI2IiIiIiFwLFVlERERERKRU2XhmIymZKfh5+tGyWkuj4xSr0IBQQEUWEREREZGySkUWEREREREpVRytwgLLb6uwHL38e2HCxJ4LeziXfM7oOCIiIiIiUkgqsoiIiIiISKmRkZXB6pOrgewiS3lX3aM6wdWDAVh1cpXBaUREREREpLBUZBERERERkVLj99jfSbQmUt29Oq2rtzY6TokICwgDIDwm3OAkIiIiIiJSWCqyiIiIiIhIqZHTKiwsIAyzqWL8upKzL8u2s9u4kn7F4DQiIiIiIlIYFeO3FhERERERKfWsNisRJ7M3gL8p6CaD05ScQJ9AGlZqSKY9k7Wn1hodR0RERERECkFFFhERERERKRW2nt3KlfQrVHGrQrsa7YyOU6JyVrNExEQYnERERERERApDRRYRERERESkVclqFhQaE4mR2MjhNycopsmw4s4G0zDSD04iIiIiISEGpyCIiIiIiIobLsmU5Nn7vE9jH4DQlr3mV5vh5+pGamcqmM5uMjiMiIiIiIgWkIouIiIiIiBhuR9wOLqVdwtfVlw5+HYyOU+JMJhOh/tmrWXKKTSIiIiIiUvqpyCIiIiIi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9sd9q+6r8Zyd4zo7EioDEwciKTJJySERERERERERERERNRmTLBQ6YlLlGi2f3ADk7QYWjgdu+wJI7R/onrUoaVFpmJ05G/f1uw+rTqzCkNQheGrTUx6PXXpgKe7sfScSwhKQEpXiqFQZkDgAsYZYhXtORERERERERERE5FtMslBoiUqQa7IsugnI2SHXarn1UyB9UKB71uKEa8MxodMEFFQUoLiq2OMxxVXFKDeX49sbv/W6PgsRERERERERERFRqFIHugNEDRYRL6cKazcUMBYBH18PHNsQ6F61WNH6aMToYzzui9HHIFYfywQLERERERERERERNUtMslBoCosBbv0M6Hg5YCoDFv8ROLQq0L1qkcxWM6Z2n+px39TuU2G2mhXuEREREREREREREZEymGSh0KWPBCYvB7peDZgrgaV/AvZ/HehetTjhunDM6DsD9/W9z1HREqOPwX1978OMvjNYxUJERERERERERETNFtdkodCmCwMmfQJ8fjew70tgxTTgxveBPjcHumctikFjwPTe03F337tRWFGIuPA4mK1mGDSGQHeNiIiIiIiIiIiIyG9YyUKhT6sHbpoH9P0TICzAZ3cBOz4JdK9anHBdOGAFdv+6G7CCFSxERERERERERETU7DHJQs2DRgtc/x6QOR2AAL56ENj6fqB71SKVlJQEugtEREREREREREREimCShZoPtRq4dg4w5H55//vHgY1vBLRLRERERERERERERNR8MclCzYtKBYz7JzDiMXl/1TPA2hcBIQLbLyIiIiIiIiIiIiJqdphkoeZHpQLGPA1c8bS8v/4l4Kd/MNFCRERERERERERERD7FJAs1XyMfA8a9KG9vfgv47nHAag1sn4iIiIiIiIiIiIio2WCShZq3offLdVqgAn77APjqz4DVEuheEREREREREREREVEzwCQLNX+X3Anc8B9ApQayFgGf3w1YTIHuFRERERERERERERGFOCZZqGXo9yfg5vmAWgvs+QxYeQdgNga6V0REREREREREREQUwphkoZaj1w3ALYsBjQE48A2wbApQVR7oXhERERERERERERFRiGKShVqWblcDU5YD2nDg8CpgySTAWBLoXhERERERERERERFRCGKShVqeTqOB2z4H9NHA8Z+BT24AKgoD3SsiIiIiIiIiIiIiCjFMslDLlHEZcPt/gbBY4PRv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jZPGaoRq81ueKzZG/RXisodgURsC0LPgoLEaodLoYSkvgCYiHsJS1aLjUR1/lzxjXLwrLi5GmzZt6kyyBP10Ya7mzZuHa665BqmpqU16HoPBAIOh5geMTqfjG8kDxsU7xsYzxsU7xsYzxsU7xsYzxsUzxsU7xsYzxsU7xsYzxsU7xsYzxsU7xsYzxsU7xgYAdMCI2fLmVmfFBgbPhGrEbKi0YVAHsnsBp4PJZMLP2/ZhxIgR0BmiWng8POPvkmeMS031jUfIJFlOnDiBVatW4fPPP3dsS05ORlVVFQoLC92mC8vLy0NyMhdzIiIiIiIiIiIiala0YcCwWRAjH4OlrACayHioLCa5nQAAJSUlge4CUYsSMsnMBQsWIDExEePHj3dsy8zMhE6nw+rVqx3bsrOzcfLkSQwdOjQQ3SQiIiIiIiIiIiJ/0kfAbFVhw7Z9MFtVgD4y0D0iohYsJCpZrFYrFixYgGnTpkGrdXY5NjYWM2bMwOzZsxEfH4+YmBj8+c9/xtChQzFkyJAA9piIiIiIiIiIiIj8iRUbRBQMQiLJsmrVKpw8eRJ33nlnjX1z5syBWq3GTTfdBKPRiHHjxuHdd98NQC+JiIiIiIiIiIiIiKglCYkky1VXXQUhhMd9YWFheOedd/DOO+8o3CsiIiIiIiIiIiIiImrJQmZNFiIiIiIiIiIiIiIiomDCJAsREREREREREREREVEjMMlCRERERERERERERETUCEyyEBERERERERERERERNQKTLERERERERERERERERI3AJAsREREREREREREREVEjMMlCRERERERERERERETUCEyyEBERERERERERERERNQKTLERERERERERERERERI3AJAsREREREREREREREVEjMMlCRERERERERERERETUCNpAdyAYCCEAAMXFxQHuSXAxmUwoLy9HcXExdDpdoLsTVBgbzxgX7xgbzxgX7xgbzxgXzxgX7xgbzxgX7xgbzxgX7xgbzxgX7xgbzxgX7xgbzxgXzxgX7xgbzxgX7+z5Anv+wBsmWQCUlJQAANLT0wPcEyIiIiIiIiIiIiIiChYlJSWIjY31ul8l6krDtABWqxU5OTmIjo6GSqUKdHeCRnFxMdLT03Hq1CnExMQEujtBhbHxjHHxjrHxjHHxjrHxjHHxjHHxjrHxjHHxjrHxjHHxjrHxjHHxjrHxjHHxjrHxjHHxjHHxjrHxjHHxTgiBkpISpKamQq32vvIKK1kAqNVqtG3bNtDdCFoxMTH8BfOCsfGMcfGOsfGMcfGOsfGMcfGMcfGOsfGMcfGOsfGMcfGOsfGMcfGOsfGMcfGOsfGMcfGMcfGOsfGMcfGstgoWOy58T0RERERERERERERE1AhMshARERERERERERERETUCkyzklcFgwDPPPAODwRDorgQdxsYzxsU7xsYzxsU7xsYzxsUzxsU7xsYzxsU7xsYzxsU7xsYzxsU7xsYzxsU7xsYzxsUzxsU7xsYzxqXpuPA9ERERERERERERERFRI7CShYiIiIiIiIiIiIiIqBGYZCEiIiIiIiIiIiIiImoEJlmIiIiIiIiIiIiIiIgagUkWIiIiIiIiIiIiIiKiRmCSpZnbsGEDJkyYgNTUVKhUKnz55Zdu+/Py8nDHHXcgNTUVERERuPrqq3Ho0CG3Y44cOYIbbrgBCQkJiImJwaRJk5CXl+d2TPv27aFSqdzaSy+95O/hNdqLL76ISy+9FNHR0UhMTMT111+P7Oxst2MqKyvxwAMPoHXr1oiKisJNN91UY9wnT57E+PHjERERgcTERDz++OMwm82O/Rs3bsSwYcPQunVrhIeHo3v37pgzZ44iY2wspWLjatOmTdBqtejfv7+/htVkSsVl3bp1NX6XVCoVcnNzFRlnQyn5fjEajXjyySeRkZEBg8GA9u3bY/78+X4fY2MpFZs77rjD43umV69eioyzoZR8zyxevBj9+vVDREQEUlJScOedd+LChQt+H2NjKRmbd955Bz169EB4eDi6deuGjz/+2O/jayxfxeWhhx5CZmYmDAaD1++b33//HSNGjEBYWBjS09Pxyiuv+GtYPqFUbCorK3HHHXegT58+0Gq1uP766/04qqZTKi7r1q3DxIkTkZKSgsjISPTv3x+LFy/259CaTKnYZGdnY/To0UhKSkJYWBg6duyIp556CiaTyZ/DazQlP2fsDh8+jOjoaMTFxfl4NL6lVGyOHz/u8f8zv/zyiz+H12hKvmeEEHjttdfQtWtXGAwGpKWl4YUXXvDX0JpEqbg8++yzHt8vkZGR/hxekyj5nvnxxx8xZMgQREdHIyEhATfddBOOHz/up5E1jZJxWbFiBfr374+IiAhkZGTg1Vdf9dewfMIXsdm1axcmT56M9PR0hIeHo0ePHnjzzTfdnuPs2bOYMmUKunbtCrVajVmzZikxvEZTKi6ff/45rrzySse50KFDh+LHH39UZIyNpVRsQvFcpxKYZGnmysrK0K9fP7zzzjs19gkhcP311+Po0aP473//i507dyIjIwNjx45FWVmZ4/FXXXUVVCoV1qxZg02bNqGqqgoTJkyA1Wp1e77nn38eZ8+edbQ///nPioyxMdavX48HHngAv/zyC3766SeYTCZcddVVjnEDwCOPPIKvv/4aK1euxPr165GTk4Mbb7zRsd9isWD8+PGoqqrC5s2b8dFHH2HhwoX4xz/+4TgmMjISDz74IDZs2ID9+/fjqaeewlNPPYX3339f0fE2hFKxsSssLMTtt9+OMWPGKDK+xlI6LtnZ2W6/T4mJiYqMs6GUjMukSZOwevVqzJs3D9nZ2Vi6dCm6deum2FgbSqnYvPnmm27vlVOnTiE+Ph5//OMfFR1vfSkVl02bNuH222/HjBkzsHfvXqxcuRK//vor7r77bkXH2xBKxea9997DE088gWeffRZ79+7Fc889hwceeABff/21ouOtL1/Exe7OO+/ELbfc4vF1iouLcdVVVyEjIwPbt2/Hq6++imeffbbZf2fb1RYbi8WC8PBwPPTQQxg7dqzfxuMrSsVl8+bN6Nu3Lz777DP8/vvvmD59Om6//XZ88803fhtbUykVG51Oh9tvvx3/+9//kJ2djTfeeAMffPABnnnmGb+NrSmUioudyWTC5MmTMWLECJ+PxdeUjs2qVavc/l+TmZnp8zH5gpJxefjhh/Hhhx/itddew4EDB/DVV19h0KBBfhlXUykVl8cee8ztfXL27Fn07NkzaP//CygXm2PHjmHixIm44oorkJWVhR9//BHnz5/3+DzBQKm4fP/995g6dSruvfde7NmzB++++y7mzJmDt99+229jaypfxGb79u1ITEzEokWLsHfvXjz55JN44okn3MZtNBqRkJCAp556Cv369VN0jI2hVFw2bNiAK6+8Et999x22b9+O0aNHY8KECdi5c6ei420IpWITiuc6FSGoxQAgvvjiC8f97OxsAUDs2bPHsc1isYiEhATxwQcfCCGE+PHHH4VarRZFRUWOYwoLC4VKpRI//fSTY1tGRoaYM2eO38fgL/n5+QKAWL9+vRBCjlGn04mVK1c6jtm/f78AILZs2SKEEOK7774T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ERERERERERERURALvom3iYiIiIiIiIiIiIiIQgCTLERERERERERERERERI3AJAsREREREREREREREVEjMMlCRERERERERERERETUCEyyEBERERERERERERERNQKTLERERERERERERERERI3AJAsREREREREREREREVEjMMlCRERERERERERERETUCEyyEBERERFRiyeEwNixY9GlSxf8/vvvGDt2LI4dOxbobhERERERUZBjkoWIiIiIiFqELVu2QKPRYPz48TX2HT9+HBqNBm+//TZuu+02xMXFoUOHDgHoJRERERERhRKVEEIEuhNERERERET+dtdddyEqKgrz5s1DdnY2UlNTA90lIiIiIiIKcaxkISIiIiKiZq+0tBTLly/Hfffdh/Hjx2PhwoWOfevWrYNKpcLq1atxySWXICIiApdddhmys7PdnuO9995Dp06doNfr0a1bN3zyyScKj4KIiIiIiIINkyxERERERNTsrVixAt27d0e3bt1w6623Yv78+ahe1P/kk0/i9ddfx7Zt26DVanHnnXc69n3xxRd4+OGH8eijj2LPnj2YOXMmpk+fjrVr1yo9FCIiIiIiCiKcLoyIiIiIiJq9YcOGYdKkSXj44YdhNpuRkpKClStX4vLLL8e6deswevRorFq1CmPGjAEAfPfddxg/fjwqKioQFhaGYcOGoVevXnj//fcdzzlp0iSUlZXh22+/DdSwiIiIiIgowFjJQkREREREzVp2djZ+/fVXTJ48GQCg1Wpxyy23YN68eW7H9e3b13E7JSUFAJCfnw8A2L9/P4YNG+Z2/LBhw7B//35/dp2IiIiIiIKcNtAdICIiIiIi8qd58+bBbDa7LXQvhIDBYMDbb7/t2KbT6Ry3VSoVAMBqtSrXUSIiIiIiCjmsZCEiIiIiombLbDbj448/xuuvv46srCxH27VrF1JTU7F06dJ6PU+PHj2wadMmt22bNm1Cz549/dFtIiIiIiIKEaxkISIiIiKiZuubb77BxYsXMWPGDMTGxrrtu+mmmzBv3jy8+uqrdT7P448/jkmTJmHAgAEYO3Ysvv76a3z++edYtWqVv7pOREREREQhgJUsRERERETUbM2bNw9jx46tkWABZJJl27Zt+P333+t8nuuvvx5vvvkmXnvtNfTq1Qtz587FggULcPnll/uh10REREREFCpUQggR6E4QERERERERERERERGFGlayEBERERERERERERERNQKTLERERERERERERERERI3AJAsREREREREREREREVEjMMlCRERERERERERERETUCEyyEBERERERERERERERNQKTLERERERERERERERERI3AJAsREREREREREREREVEjMMlCRERERERERERERETUCEyyEBERERERERERERERNQKTLERERERERERERERERI3AJAsREREREREREREREVEj/H8Y13VogqFd6AAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Prediction of the pole position of 2024 using ARIMA.\n",
        "\n",
        "ARIMA stands for AutoRegressive Integrated Moving Average. It is a popular time series forecasting model that combines three components: autoregression (AR), differencing (I), and moving average (MA). The ARIMA model is particularly useful for analyzing and forecasting time series data, which is a sequence of observations collected over time."
      ],
      "metadata": {
        "id": "O3qSRWQ1AB0_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# ARIMA model for Monza circuit\n",
        "# p=1: One lag of the autoregressive component.\n",
        "# d=1: One order of differencing (to make the time series stationary).\n",
        "# q=1: One lag of the moving average component.\n",
        "modelo_arima = ARIMA(final_df['Tiempo Monza'], order=(1, 1, 1))\n",
        "resultados_arima = modelo_arima.fit()\n",
        "\n",
        "# Forecasting for the year 2024 for Monza\n",
        "# The get_forecast method is used to make a forecast for the next step (1 step ahead), which corresponds to the year 2024.\n",
        "prediccion_2024Monza = resultados_arima.get_forecast(steps=1).predicted_mean.iloc[0]\n",
        "print('Predicción para el año 2024:', int(prediccion_2024Monza/60), ':', (prediccion_2024Monza-60),'segundos')\n",
        "\n",
        "modelo_arima = ARIMA(final_df['Tiempo Monaco'], order=(1, 1, 1))\n",
        "resultados_arima = modelo_arima.fit()\n",
        "\n",
        "prediccion_2024Monaco = resultados_arima.get_forecast(steps=1).predicted_mean.iloc[0]\n",
        "print('Predicción para el año 2024:', int(prediccion_2024Monaco/60), ':', (prediccion_2024Monaco-60),'segundos')\n",
        "\n",
        "modelo_arima = ARIMA(final_df['Tiempo '], order=(1, 1, 1))\n",
        "resultados_arima = modelo_arima.fit()\n",
        "\n",
        "prediccion_2024Silverstone = resultados_arima.get_forecast(steps=1).predicted_mean.iloc[0]\n",
        "print('Predicción para el año 2024:', int(prediccion_2024Silverstone/60), ':', (prediccion_2024Silverstone-60),'segundos')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_D-zUK2XtRo1",
        "outputId": "657901e4-1956-40cd-bde0-c2f9c847690c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicción para el año 2024: 1 : 23.093406317135802 segundos\n",
            "Predicción para el año 2024: 1 : 11.29894142483316 segundos\n",
            "Predicción para el año 2024: 1 : 34.71546397945926 segundos\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(20, 6))\n",
        "sns.lineplot(data=final_df, x='Año', y='Tiempo Monza', label='Monza', marker='o')\n",
        "sns.lineplot(data=final_df, x='Año', y='Tiempo Monaco', label='Monaco', marker='o')\n",
        "sns.lineplot(data=final_df, x='Año', y='Tiempo ', label='Silverstone', marker='o')\n",
        "plt.scatter(21, prediccion_2024Monza, color='blue', marker='o', label='Predicción 2024')\n",
        "plt.scatter(21, prediccion_2024Monaco, color='orange', marker='o', label='Predicción 2024')\n",
        "plt.scatter(21, prediccion_2024Silverstone, color='green', marker='o', label='Predicción 2024')\n",
        "\n",
        "\n",
        "plt.title('Pole position evolution')\n",
        "plt.xlabel('Año')\n",
        "plt.ylabel('Tiempo por vuelta (segundos)')\n",
        "plt.grid(True)\n",
        "plt.legend(title='DataFrames')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "Sz6bcsEHuje3",
        "outputId": "6bf23296-8f11-465b-c55b-ee5519bb2f43"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Data needed for wins Data Studio Google\n",
        "\n",
        "This is the first database generation, which corresponds to the dataset \"wins\" and will be used in the dashboard only. Avoid running the cell in order to save time"
      ],
      "metadata": {
        "id": "4S2CT6tjvgAj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data = []\n",
        "\n",
        "for year in range(1950,2024):\n",
        "    request = f'http://ergast.com/api/f1/{year}.json'\n",
        "    response = requests.get(request)\n",
        "    # Get the number of races for the current year = year\n",
        "    nRaces = len(response.json()['MRData']['RaceTable']['Races'])\n",
        "\n",
        "    for i in range(nRaces):\n",
        "        row = []\n",
        "        request = f'http://ergast.com/api/f1/{year}/{i}/results.json'\n",
        "        response = requests.get(request)\n",
        "\n",
        "        # Append year, race index, driver ID, and constructor ID to the row\n",
        "        row.append(year)\n",
        "        row.append(i)\n",
        "        row.append(response.json()['MRData']['RaceTable']['Races'][0]['Results'][0]['Driver']['driverId'])\n",
        "        row.append(response.json()['MRData']['RaceTable']['Races'][0]['Results'][0]['Constructor']['constructorId'])\n",
        "        # Append the row to the main data list\n",
        "        data.append(row)\n"
      ],
      "metadata": {
        "id": "iLUN8KB-XVbY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "nombres_columnas = [\"year\", \"round\", \"driver\", \"constructor\"]\n",
        "df = pd.DataFrame(data, columns=nombres_columnas)\n",
        "\n",
        "df.to_csv(path2+'wins.csv', index=False)"
      ],
      "metadata": {
        "id": "Fa044hAPgE_Z"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Boxes and result per circuit and year\n",
        "\n",
        "This is the second database generation, which corresponds to the dataset \"boxes\" and will be used in the dashboard only. Avoid running the cell in order to save time"
      ],
      "metadata": {
        "id": "YPSZFxKiVmZF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "notFinished = ['Finished','+1 Lap','+2 Laps','+3 Laps']\n",
        "data = []\n",
        "\n",
        "for year in range(2012,2023):\n",
        "    request = f'http://ergast.com/api/f1/{year}.json'\n",
        "    response = requests.get(request)\n",
        "    nRaces = len(response.json()['MRData']['RaceTable']['Races'])\n",
        "\n",
        "    # Iterate through each race in the current year\n",
        "    for i in range(1,nRaces + 1):\n",
        "        # Exclude the 12th race of 2021, which was suspended due to rain\n",
        "        if year == 2021 and i == 12:\n",
        "          pass\n",
        "        else:\n",
        "          row = []\n",
        "\n",
        "          request1 = f'http://ergast.com/api/f1/{year}/{i}/results.json'\n",
        "          response1 = requests.get(request1)\n",
        "\n",
        "          # Variables to track changes in position and retired drivers\n",
        "          changes = 0\n",
        "          retired = 0\n",
        "          # Iterate through each driver's result in the race\n",
        "          for driver in response1.json()['MRData']['RaceTable']['Races'][0]['Results']:\n",
        "              changes += abs(int(driver['position']) - int(driver['grid']))\n",
        "\n",
        "              # Check if the driver finished in the 1st position and record their fastest lap speed\n",
        "              if int(driver['position']) == 1:\n",
        "                row.append(float(driver['FastestLap']['AverageSpeed']['speed']))\n",
        "              # Check if the driver's status indicates they did not finish\n",
        "              if driver['status'] not in notFinished:\n",
        "                retired += 1\n",
        "\n",
        "          # Append changes in position and the number of retired drivers to the row\n",
        "          row.append(changes)\n",
        "          row.append(retired)\n",
        "\n",
        "          request2 = f'http://ergast.com/api/f1/{year}/{i}/pitstops.json?limit=500'\n",
        "          response2 = requests.get(request2)\n",
        "\n",
        "          # Append year and circuit ID to the row\n",
        "          row.append(year)\n",
        "          row.append(response2.json()['MRData']['RaceTable']['Races'][0]['Circuit']['circuitId'])\n",
        "\n",
        "          # Variables to track pit stop duration and the number of pit stops\n",
        "          duration = 0\n",
        "          pits = 0\n",
        "          # Iterate through each pit stop in the race\n",
        "          for pit in response2.json()['MRData']['RaceTable']['Races'][0]['PitStops']:\n",
        "            aux = pit['duration'].split(':')\n",
        "\n",
        "            if len(aux) == 1:\n",
        "            # If there is only one component (seconds), add it to the total duration\n",
        "              duration += float(aux[0])\n",
        "              pits += 1\n",
        "            else:\n",
        "            # If there are two components (minutes and seconds), check if the total duration is less than 250 seconds\n",
        "              if (float(aux[1]) + int(aux[0]) * 60) < 250:\n",
        "                duration += (float(aux[1]) + int(aux[0]) * 60)\n",
        "                pits += 1\n",
        "          row.append(pits)\n",
        "          row.append(duration)\n",
        "\n",
        "          data.append(row)"
      ],
      "metadata": {
        "id": "-IkktEDmVmkd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "nombres_columnas = ['avgSpeedLeader','positionChanges','retired','Year','Circuit','Pits','avgDuration']\n",
        "df = pd.DataFrame(data, columns=nombres_columnas)\n",
        "# Create the average duration in boxes\n",
        "df['avgDuration'] = df['avgDuration'] / df['Pits']\n",
        "df.head()"
      ],
      "metadata": {
        "id": "09-VceTVVmtU",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "dfd41942-2ad6-4e92-c3da-9a59bd298a02"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   avgSpeedLeader  positionChanges  retired  Year      Circuit  Pits  \\\n",
              "0         214.053              171       11  2012  albert_park    41   \n",
              "1         196.250              136        3  2012       sepang    76   \n",
              "2         194.356               96        1  2012     shanghai    55   \n",
              "3         202.151               98        4  2012      bahrain    71   \n",
              "4         190.635               84        5  2012    catalunya    67   \n",
              "\n",
              "   avgDuration  \n",
              "0    24.706927  \n",
              "1    25.766658  \n",
              "2    22.102691  \n",
              "3    23.381197  \n",
              "4    20.973507  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-210c23ac-f440-481c-a115-36497a304405\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>avgSpeedLeader</th>\n",
              "      <th>positionChanges</th>\n",
              "      <th>retired</th>\n",
              "      <th>Year</th>\n",
              "      <th>Circuit</th>\n",
              "      <th>Pits</th>\n",
              "      <th>avgDuration</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>214.053</td>\n",
              "      <td>171</td>\n",
              "      <td>11</td>\n",
              "      <td>2012</td>\n",
              "      <td>albert_park</td>\n",
              "      <td>41</td>\n",
              "      <td>24.706927</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>196.250</td>\n",
              "      <td>136</td>\n",
              "      <td>3</td>\n",
              "      <td>2012</td>\n",
              "      <td>sepang</td>\n",
              "      <td>76</td>\n",
              "      <td>25.766658</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>194.356</td>\n",
              "      <td>96</td>\n",
              "      <td>1</td>\n",
              "      <td>2012</td>\n",
              "      <td>shanghai</td>\n",
              "      <td>55</td>\n",
              "      <td>22.102691</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>202.151</td>\n",
              "      <td>98</td>\n",
              "      <td>4</td>\n",
              "      <td>2012</td>\n",
              "      <td>bahrain</td>\n",
              "      <td>71</td>\n",
              "      <td>23.381197</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>190.635</td>\n",
              "      <td>84</td>\n",
              "      <td>5</td>\n",
              "      <td>2012</td>\n",
              "      <td>catalunya</td>\n",
              "      <td>67</td>\n",
              "      <td>20.973507</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-210c23ac-f440-481c-a115-36497a304405')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-210c23ac-f440-481c-a115-36497a304405 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-210c23ac-f440-481c-a115-36497a304405');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5dcd9442-32d8-4a97-bcfe-48e167f77fc8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5dcd9442-32d8-4a97-bcfe-48e167f77fc8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5dcd9442-32d8-4a97-bcfe-48e167f77fc8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.to_csv(path2+'boxes.csv', index=False)"
      ],
      "metadata": {
        "id": "EQlDOMo3Vm2b"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "In order to see the graph below, you should only need to run the follwing cell if you have specified the path where the dataset boxes is located"
      ],
      "metadata": {
        "id": "7JklhDBvAnlT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df=pd.read_csv(path2+'boxes.csv')\n",
        "df_filtered = df[df['Circuit'].isin(['monaco', 'albert_park', 'monza'])]\n",
        "\n",
        "sns.set(style=\"whitegrid\")\n",
        "\n",
        "plt.figure(figsize=(15, 6))\n",
        "sns.lineplot(x='Year', y='avgDuration', hue='Circuit', data=df_filtered, marker='o')\n",
        "\n",
        "plt.xlabel('Año')\n",
        "plt.ylabel('Tiempo')\n",
        "plt.title('Tiempo medio en boxes en 3 circuitos')\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "n2oig6KRVm-7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 573
        },
        "outputId": "116e4e53-961a-41af-fbca-e7264be2bd76"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Clustering of drivers\n",
        "\n",
        "This corresponds to the generation of the \"clusterDriver\" dataset, where some variables are gathered in order to group drivers within the notebook. Avoid executing it in order to save time"
      ],
      "metadata": {
        "id": "0NiOhXWm4RfK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "drivers = 'http://ergast.com/api/f1/drivers.json?limit=858'\n",
        "response = requests.get(drivers)\n",
        "driverIds = []\n",
        "for i in range(len(response.json()['MRData']['DriverTable']['Drivers'])):\n",
        "  driverIds.append(response.json()['MRData']['DriverTable']['Drivers'][i]['driverId'])\n",
        "\n",
        "# Create a zero-matrix for all the driverIDs.\n",
        "df = pd.DataFrame({'id': driverIds, 'avgPosition': np.zeros(len(driverIds)), 'avgPoints': np.zeros(len(driverIds)), 'totalWins': np.zeros(len(driverIds)), 'avgWins': np.zeros(len(driverIds)), 'seasons': np.zeros(len(driverIds)), 'totalRaces': np.zeros(len(driverIds))})\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "1rK2g2Oe4QqJ",
        "outputId": "d77e07c6-ad5f-4def-e953-9fb195afa7b3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          id  avgPosition  avgPoints  totalWins  avgWins  seasons  totalRaces\n",
              "0      abate          0.0        0.0        0.0      0.0      0.0         0.0\n",
              "1  abecassis          0.0        0.0        0.0      0.0      0.0         0.0\n",
              "2    acheson          0.0        0.0        0.0      0.0      0.0         0.0\n",
              "3      adams          0.0        0.0        0.0      0.0      0.0         0.0\n",
              "4       ader          0.0        0.0        0.0      0.0      0.0         0.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d5b991c1-e2cd-44d4-9ff2-9378da796952\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>avgPosition</th>\n",
              "      <th>avgPoints</th>\n",
              "      <th>totalWins</th>\n",
              "      <th>avgWins</th>\n",
              "      <th>seasons</th>\n",
              "      <th>totalRaces</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>abate</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>abecassis</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>acheson</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>adams</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ader</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d5b991c1-e2cd-44d4-9ff2-9378da796952')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d5b991c1-e2cd-44d4-9ff2-9378da796952 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d5b991c1-e2cd-44d4-9ff2-9378da796952');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-fdf59a7f-55c7-4110-9278-f3fe099e2104\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fdf59a7f-55c7-4110-9278-f3fe099e2104')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-fdf59a7f-55c7-4110-9278-f3fe099e2104 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for year in range(1950,2024):\n",
        "    request = f'http://ergast.com/api/f1/{year}/driverStandings.json?limit=100'\n",
        "    response = requests.get(request)\n",
        "\n",
        "    # Iterate through each driver in the standings list for the current year\n",
        "    for i in range(len(response.json()['MRData']['StandingsTable']['StandingsLists'][0]['DriverStandings'])):\n",
        "      driver = response.json()['MRData']['StandingsTable']['StandingsLists'][0]['DriverStandings'][i]['Driver']['driverId']\n",
        "      # Update DataFrame (df) with driver statistics for each year\n",
        "      df.loc[df['id'] == driver, 'avgPosition'] += int(response.json()['MRData']['StandingsTable']['StandingsLists'][0]['DriverStandings'][i]['position'])\n",
        "      df.loc[df['id'] == driver, 'avgPoints'] += float(response.json()['MRData']['StandingsTable']['StandingsLists'][0]['DriverStandings'][i]['points'])\n",
        "      df.loc[df['id'] == driver, 'totalWins'] += int(response.json()['MRData']['StandingsTable']['StandingsLists'][0]['DriverStandings'][i]['wins'])\n",
        "      df.loc[df['id'] == driver, 'avgWins'] += int(response.json()['MRData']['StandingsTable']['StandingsLists'][0]['DriverStandings'][i]['wins'])\n",
        "      df.loc[df['id'] == driver, 'seasons'] += 1\n",
        "      df.loc[df['id'] == driver, 'totalRaces'] += int(response.json()['MRData']['StandingsTable']['StandingsLists'][0]['round'])\n",
        "\n",
        "# Calculate average statistics per season for each driver\n",
        "df['avgPosition'] = df['avgPosition'] / df['seasons']\n",
        "df['avgPoints'] = df['avgPoints'] / df['seasons']\n",
        "df['avgWins'] = df['avgWins'] / df['seasons']\n"
      ],
      "metadata": {
        "id": "tc6-7_bi7oqp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Check data gathering is correct\n",
        "df[df['totalWins'] > 50]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "n_OluEQ-FKRz",
        "outputId": "5c17b508-6729-4f9f-c0e2-d4567eb49502"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                     id  avgPosition   avgPoints  totalWins   avgWins  \\\n",
              "347            hamilton     2.588235  272.911765      103.0  6.058824   \n",
              "625               prost     3.538462   59.115385       51.0  3.923077   \n",
              "703  michael_schumacher     5.210526   82.421053       91.0  4.789474   \n",
              "801      max_verstappen     4.000000  287.388889       54.0  6.000000   \n",
              "803              vettel     5.375000  193.625000       53.0  3.312500   \n",
              "\n",
              "     seasons  totalRaces  \n",
              "347     17.0       333.0  \n",
              "625     13.0       204.0  \n",
              "703     19.0       326.0  \n",
              "801      9.0       185.0  \n",
              "803     16.0       311.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fc585488-f164-49c8-b129-38292584b80e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>avgPosition</th>\n",
              "      <th>avgPoints</th>\n",
              "      <th>totalWins</th>\n",
              "      <th>avgWins</th>\n",
              "      <th>seasons</th>\n",
              "      <th>totalRaces</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>347</th>\n",
              "      <td>hamilton</td>\n",
              "      <td>2.588235</td>\n",
              "      <td>272.911765</td>\n",
              "      <td>103.0</td>\n",
              "      <td>6.058824</td>\n",
              "      <td>17.0</td>\n",
              "      <td>333.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>625</th>\n",
              "      <td>prost</td>\n",
              "      <td>3.538462</td>\n",
              "      <td>59.115385</td>\n",
              "      <td>51.0</td>\n",
              "      <td>3.923077</td>\n",
              "      <td>13.0</td>\n",
              "      <td>204.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>703</th>\n",
              "      <td>michael_schumacher</td>\n",
              "      <td>5.210526</td>\n",
              "      <td>82.421053</td>\n",
              "      <td>91.0</td>\n",
              "      <td>4.789474</td>\n",
              "      <td>19.0</td>\n",
              "      <td>326.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>801</th>\n",
              "      <td>max_verstappen</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>287.388889</td>\n",
              "      <td>54.0</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>185.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>803</th>\n",
              "      <td>vettel</td>\n",
              "      <td>5.375000</td>\n",
              "      <td>193.625000</td>\n",
              "      <td>53.0</td>\n",
              "      <td>3.312500</td>\n",
              "      <td>16.0</td>\n",
              "      <td>311.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fc585488-f164-49c8-b129-38292584b80e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fc585488-f164-49c8-b129-38292584b80e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fc585488-f164-49c8-b129-38292584b80e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d4f1cd1a-ebd9-4cd1-8d80-5cc163211405\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d4f1cd1a-ebd9-4cd1-8d80-5cc163211405')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d4f1cd1a-ebd9-4cd1-8d80-5cc163211405 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.to_csv(path2+'clusterDriver.csv', index=False)"
      ],
      "metadata": {
        "id": "TmSeKecJDtjN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Kmeans1\n",
        "\n",
        "This part of the code represents the clustering process itself and can be executed independently.\n",
        "\n",
        "The goal is to group Formula 1 drivers into clusters based on their performance characteristics across various seasons. K-means is an unsupervised learning algorithm, meaning it doesn't require labeled data.\n",
        "\n",
        "In this case, drivers are grouped without prior information about which group they should belong to.\n",
        "K-means is effective in clustering data points with similar characteristics. In Formula 1, drivers with similar performance metrics across seasons are likely to be grouped together.\n",
        "\n",
        "Also, K-means is a relatively simple and computationally efficient clustering algorithm. It's suitable for large datasets, making it applicable to the extensive historical data of Formula 1, and the resulting clusters are easy to interpret, making it useful for identifying meaningful patterns in the data.\n"
      ],
      "metadata": {
        "id": "611w3hXzHZnz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "df = pd.read_csv(path2+'clusterDriver.csv')"
      ],
      "metadata": {
        "id": "hq6R95peY8zB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = df.fillna(0)\n",
        "\n",
        "colsUsed = df[['avgPosition','avgPoints','totalWins','avgWins','seasons','totalRaces']]\n",
        "\n",
        "# Normalizar los datos\n",
        "scaler = StandardScaler()\n",
        "colsUsedNorm = scaler.fit_transform(colsUsed)\n"
      ],
      "metadata": {
        "id": "7CHdIiTZHYmf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Elbow plot to know optimal number of clusters\n",
        "inertia = []\n",
        "\n",
        "for k in range(2, 25):  #diferentes valores de k para K-Means\n",
        "    kmeans = KMeans(n_clusters=k)\n",
        "    kmeans.fit(colsUsedNorm)\n",
        "    inertia.append(kmeans.inertia_)\n",
        "\n",
        "# Plot the graph with the elbow rule\n",
        "\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.plot(range(2, 25), inertia, marker='o', linestyle='-', color='b')\n",
        "plt.title('Elbow rule')\n",
        "plt.xlabel('Number of Clusters')\n",
        "plt.ylabel('Inertia')\n",
        "plt.grid()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "Ke61hnQ8TNr1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "3fbfac09-b692-4442-b445-2110768b3289"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "kmeans = KMeans(n_clusters=7, random_state=42) #optimal k based on the plot\n",
        "df['Cluster'] = kmeans.fit_predict(colsUsedNorm)"
      ],
      "metadata": {
        "id": "ChkAmNdPWO7s",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "94a63537-8767-4196-fddb-638e0ec8c416"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "bestDrivers = df[df['Cluster'] == 6]\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.bar(bestDrivers['id'], bestDrivers['totalWins'], color='skyblue')\n",
        "plt.xlabel('Id')\n",
        "plt.ylabel('Wins')\n",
        "plt.title('Gráfico de Barras')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 574
        },
        "id": "JxFa6Wm9Z81k",
        "outputId": "5b33135c-cd0e-4aab-cc22-4993304debc7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "alonsoDrivers = df[df['Cluster'] == 1]\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.bar(alonsoDrivers['id'], alonsoDrivers['totalWins'], color='skyblue')\n",
        "plt.xlabel('Id')\n",
        "plt.ylabel('Wins')\n",
        "plt.title('Gráfico de Barras')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 573
        },
        "id": "Wt3FXPvjak3W",
        "outputId": "3276291d-d4ff-4d23-84a0-50f30326fc56"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Evolución puntos del campeón a lo largo de los años\n",
        "\n",
        "This one is used to obtain the dataset \"points\", which will be used both in dashboard and notebook. Avoid executing this cell to save time."
      ],
      "metadata": {
        "id": "QHgaq8A2HnDo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "points = []\n",
        "winner = []\n",
        "for year in range(1950,2024):\n",
        "  request = f'http://ergast.com/api/f1/{year}/driverStandings/1.json'\n",
        "  response = requests.get(request)\n",
        "  # Iterate through each set of driver standings for the current year\n",
        "  for i in range(len(response.json()['MRData']['StandingsTable']['StandingsLists'])):\n",
        "      # Append the points and winner information to the respective lists\n",
        "      points.append(float(response.json()['MRData']['StandingsTable']['StandingsLists'][0]['DriverStandings'][0]['points']))\n",
        "      winner.append(str(response.json()['MRData']['StandingsTable']['StandingsLists'][0]['DriverStandings'][0]['Driver'][\"driverId\"]))\n",
        "\n"
      ],
      "metadata": {
        "id": "caLJ4JI6Hl49"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "# Fetching and accumulating total points for Formula 1 drivers each season\n",
        "\n",
        "# Initialize a list to store total points for each season (1950 to 2023)\n",
        "totalPoints = [0 for _ in range(1950,2024)]\n",
        "# Initialize an additional list to store cumulative total points for all seasons\n",
        "totalPoints2 = []\n",
        "# Initialize a variable to store the temporary total points for each season\n",
        "total = 0\n",
        "\n",
        "for year in range(1950,2024):\n",
        "  request = f'http://ergast.com/api/f1/{year}/driverStandings.json'\n",
        "  response = requests.get(request)\n",
        "  # Iterate through each driver in the standings list for the current season\n",
        "  for pilot in range(len(response.json()['MRData']['StandingsTable']['StandingsLists'][0]['DriverStandings'])):\n",
        "    # Accumulate the points for each driver in the season\n",
        "    total += float(response.json()['MRData']['StandingsTable']['StandingsLists'][0]['DriverStandings'][pilot]['points'])\n",
        "  # Append the total points for the season to the list\n",
        "  totalPoints2.append(total)\n",
        "  # Reset the temporary total for the next season\n",
        "  total = 0\n"
      ],
      "metadata": {
        "id": "svMuPfSvvx0y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(totalPoints2)\n",
        "print(points)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ih4PT1fqVbnd",
        "outputId": "699cd28a-56a9-4629-e1a9-286bd4e928d1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[164.0, 174.0, 171.5, 187.5, 198.92, 166.99, 186.5, 186.0, 252.0, 213.0, 233.0, 196.0, 210.0, 222.0, 248.0, 242.0, 216.0, 273.0, 298.0, 275.0, 324.0, 275.0, 300.0, 375.0, 375.0, 325.0, 400.0, 425.0, 400.0, 347.0, 339.0, 375.0, 399.0, 369.0, 383.5, 397.0, 396.0, 395.0, 378.0, 395.0, 397.0, 403.0, 416.0, 416.0, 416.0, 442.0, 416.0, 442.0, 416.0, 416.0, 442.0, 442.0, 442.0, 624.0, 702.0, 738.0, 702.0, 663.0, 702.0, 643.5, 1919.0, 1919.0, 2020.0, 1919.0, 2020.0, 1919.0, 2121.0, 2020.0, 2121.0, 2140.0, 1734.0, 2207.5, 2350.0, 2458.0]\n",
            "[30.0, 31.0, 36.0, 34.5, 42.0, 40.0, 30.0, 40.0, 42.0, 31.0, 43.0, 34.0, 42.0, 54.0, 40.0, 54.0, 42.0, 51.0, 48.0, 63.0, 45.0, 62.0, 61.0, 71.0, 55.0, 64.5, 69.0, 72.0, 64.0, 51.0, 67.0, 50.0, 44.0, 59.0, 72.0, 73.0, 72.0, 73.0, 90.0, 76.0, 78.0, 96.0, 108.0, 99.0, 92.0, 102.0, 97.0, 81.0, 100.0, 76.0, 108.0, 123.0, 144.0, 93.0, 148.0, 133.0, 134.0, 110.0, 98.0, 95.0, 256.0, 392.0, 281.0, 397.0, 384.0, 381.0, 385.0, 363.0, 408.0, 413.0, 347.0, 395.5, 454.0, 575.0]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculating the percentage of total points for each winner in a season\n",
        "\n",
        "perWinner = []\n",
        "\n",
        "# Iterate through the range of points\n",
        "for i in range(len(points)):\n",
        "    # Calculate the percentage of total points for the current winner in the season\n",
        "    div = points[i] / totalPoints2[i]\n",
        "\n",
        "    # Round the result to four decimal places and append to the list\n",
        "    perWinner.append(round(div, 4))\n",
        "\n"
      ],
      "metadata": {
        "id": "SC40ovBAWV6Q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "years = [year for year in range(1950, 2024)]\n",
        "df = pd.DataFrame({'year':years,'winner': winner, 'winnerPpoints':points, 'totalPoints': totalPoints2, '% winner':perWinner})\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "eNEOyv5QM_Zl",
        "outputId": "5394c819-b8bf-44f0-cb74-3989a8f38560"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   year  winner  winnerPpoints  totalPoints  % winner\n",
              "0  1950  farina           30.0       164.00    0.1829\n",
              "1  1951  fangio           31.0       174.00    0.1782\n",
              "2  1952  ascari           36.0       171.50    0.2099\n",
              "3  1953  ascari           34.5       187.50    0.1840\n",
              "4  1954  fangio           42.0       198.92    0.2111"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3215b223-9c7e-415e-8944-7aa87f4230da\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>year</th>\n",
              "      <th>winner</th>\n",
              "      <th>winnerPpoints</th>\n",
              "      <th>totalPoints</th>\n",
              "      <th>% winner</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1950</td>\n",
              "      <td>farina</td>\n",
              "      <td>30.0</td>\n",
              "      <td>164.00</td>\n",
              "      <td>0.1829</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1951</td>\n",
              "      <td>fangio</td>\n",
              "      <td>31.0</td>\n",
              "      <td>174.00</td>\n",
              "      <td>0.1782</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1952</td>\n",
              "      <td>ascari</td>\n",
              "      <td>36.0</td>\n",
              "      <td>171.50</td>\n",
              "      <td>0.2099</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1953</td>\n",
              "      <td>ascari</td>\n",
              "      <td>34.5</td>\n",
              "      <td>187.50</td>\n",
              "      <td>0.1840</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1954</td>\n",
              "      <td>fangio</td>\n",
              "      <td>42.0</td>\n",
              "      <td>198.92</td>\n",
              "      <td>0.2111</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3215b223-9c7e-415e-8944-7aa87f4230da')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3215b223-9c7e-415e-8944-7aa87f4230da button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3215b223-9c7e-415e-8944-7aa87f4230da');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-08324b87-5d4d-4f38-a0d1-1563f4041026\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-08324b87-5d4d-4f38-a0d1-1563f4041026')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-08324b87-5d4d-4f38-a0d1-1563f4041026 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.to_csv(path2+'points.csv', index=False)"
      ],
      "metadata": {
        "id": "3H_ST5YlYqWr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Within the following cell a time series of the points distribution is represented"
      ],
      "metadata": {
        "id": "vwAiWlkkCE4i"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(path2+'points.csv')\n",
        "\n",
        "plt.figure(figsize=(15, 6))  # Tamaño del gráfico\n",
        "sns.lineplot(data=df, x='year', y='totalPoints', marker='o')\n",
        "plt.title('Evolución de la variable \"points\" por año')  # Título del gráfico\n",
        "plt.xlabel('Año')  # Etiqueta del eje x\n",
        "plt.ylabel('Puntos')  # Etiqueta del eje y\n",
        "plt.legend()  # Mostrar leyenda\n",
        "plt.grid(True)  # Mostrar cuadrícula\n",
        "plt.show()  # Mostrar gráfico"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 590
        },
        "id": "LkJ2XarSL0TU",
        "outputId": "6980e1f5-fdb1-4c64-90e4-50449df87e1e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.legend:No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Predict next winners\n",
        "\n",
        "In this section we will collect several datasets, explore them and use the main characteristics to fit models in order to predict the next winner"
      ],
      "metadata": {
        "id": "a1pvN6VizCD2"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Get data\n",
        "\n",
        "First of all we are going to get the data from the Ergast API.\n",
        "\n",
        "We will use information from the circuits, the results of each race and the driver standings before each race. Avoid executing this cell since it is the one related to data gathering of ML part and takes time. In order to play with the models data is imported later."
      ],
      "metadata": {
        "id": "1bYQ3Z0Jz73k"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "races={} #We will store all data here in order to later be converted into a pandas dataframe\n",
        "url = 'https://ergast.com/api/f1/{}.json'\n",
        "# Flag to identify the first iteration\n",
        "first_iter=True\n",
        "\n",
        "for year in range(1950,2020):\n",
        "  # Get data for a specific year from the API\n",
        "  response = requests.get(url.format(year))\n",
        "  json=response.json()\n",
        "\n",
        "   # Iterate over all races in the current year\n",
        "  for item in json['MRData']['RaceTable']['Races']:\n",
        "    # Iterate over all variables of each circuit in a race\n",
        "    for key, value in item.items():\n",
        "      # We don't have 'time' until 2005, so we don't use it\n",
        "      if key!='time':\n",
        "          #If we are in the first iteration we need to define the list in which we are going to store the values\n",
        "          if first_iter:\n",
        "              #The 'circuit' key is another dictionary with more values so we have to select them\n",
        "              if key=='Circuit':\n",
        "                  races['circuit_id']=[value['circuitId']]\n",
        "                  races['lat']=[value['Location']['lat']]\n",
        "                  races['long']=[value['Location']['long']]\n",
        "                  races['country']=[value['Location']['country']]\n",
        "              else:\n",
        "                races[key]=[value]\n",
        "          #If it is not the first iteration we can simply append the value at the existing list\n",
        "          else:\n",
        "              if key=='Circuit':\n",
        "                races['circuit_id'].append(value['circuitId'])\n",
        "                races['lat'].append(value['Location']['lat'])\n",
        "                races['long'].append(value['Location']['long'])\n",
        "                races['country'].append(value['Location']['country'])\n",
        "              else:\n",
        "                races[key].append(value)\n",
        "\n",
        "    first_iter=False\n",
        "\n",
        "# Convert the dictionary to a pandas dataframe\n",
        "races = pd.DataFrame(races)\n",
        "races.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "3xFGiba-0PXi",
        "outputId": "711779c3-13e6-4192-cd1f-b4dcb4a57206"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  season round                                                url  \\\n",
              "0   1950     1  http://en.wikipedia.org/wiki/1950_British_Gran...   \n",
              "1   1950     2  http://en.wikipedia.org/wiki/1950_Monaco_Grand...   \n",
              "2   1950     3  http://en.wikipedia.org/wiki/1950_Indianapolis...   \n",
              "3   1950     4  http://en.wikipedia.org/wiki/1950_Swiss_Grand_...   \n",
              "4   1950     5  http://en.wikipedia.org/wiki/1950_Belgian_Gran...   \n",
              "\n",
              "             raceName    circuit_id      lat      long      country  \\\n",
              "0  British Grand Prix   silverstone  52.0786  -1.01694           UK   \n",
              "1   Monaco Grand Prix        monaco  43.7347   7.42056       Monaco   \n",
              "2    Indianapolis 500  indianapolis   39.795  -86.2347          USA   \n",
              "3    Swiss Grand Prix    bremgarten  46.9589   7.40194  Switzerland   \n",
              "4  Belgian Grand Prix           spa  50.4372   5.97139      Belgium   \n",
              "\n",
              "         date  \n",
              "0  1950-05-13  \n",
              "1  1950-05-21  \n",
              "2  1950-05-30  \n",
              "3  1950-06-04  \n",
              "4  1950-06-18  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7011d864-bb12-4e2d-9660-e10ce4ea7148\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>season</th>\n",
              "      <th>round</th>\n",
              "      <th>url</th>\n",
              "      <th>raceName</th>\n",
              "      <th>circuit_id</th>\n",
              "      <th>lat</th>\n",
              "      <th>long</th>\n",
              "      <th>country</th>\n",
              "      <th>date</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1950</td>\n",
              "      <td>1</td>\n",
              "      <td>http://en.wikipedia.org/wiki/1950_British_Gran...</td>\n",
              "      <td>British Grand Prix</td>\n",
              "      <td>silverstone</td>\n",
              "      <td>52.0786</td>\n",
              "      <td>-1.01694</td>\n",
              "      <td>UK</td>\n",
              "      <td>1950-05-13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1950</td>\n",
              "      <td>2</td>\n",
              "      <td>http://en.wikipedia.org/wiki/1950_Monaco_Grand...</td>\n",
              "      <td>Monaco Grand Prix</td>\n",
              "      <td>monaco</td>\n",
              "      <td>43.7347</td>\n",
              "      <td>7.42056</td>\n",
              "      <td>Monaco</td>\n",
              "      <td>1950-05-21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1950</td>\n",
              "      <td>3</td>\n",
              "      <td>http://en.wikipedia.org/wiki/1950_Indianapolis...</td>\n",
              "      <td>Indianapolis 500</td>\n",
              "      <td>indianapolis</td>\n",
              "      <td>39.795</td>\n",
              "      <td>-86.2347</td>\n",
              "      <td>USA</td>\n",
              "      <td>1950-05-30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1950</td>\n",
              "      <td>4</td>\n",
              "      <td>http://en.wikipedia.org/wiki/1950_Swiss_Grand_...</td>\n",
              "      <td>Swiss Grand Prix</td>\n",
              "      <td>bremgarten</td>\n",
              "      <td>46.9589</td>\n",
              "      <td>7.40194</td>\n",
              "      <td>Switzerland</td>\n",
              "      <td>1950-06-04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1950</td>\n",
              "      <td>5</td>\n",
              "      <td>http://en.wikipedia.org/wiki/1950_Belgian_Gran...</td>\n",
              "      <td>Belgian Grand Prix</td>\n",
              "      <td>spa</td>\n",
              "      <td>50.4372</td>\n",
              "      <td>5.97139</td>\n",
              "      <td>Belgium</td>\n",
              "      <td>1950-06-18</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7011d864-bb12-4e2d-9660-e10ce4ea7148')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7011d864-bb12-4e2d-9660-e10ce4ea7148 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7011d864-bb12-4e2d-9660-e10ce4ea7148');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-98fe9cf6-4118-464b-85cd-76defbb0b2cd\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-98fe9cf6-4118-464b-85cd-76defbb0b2cd')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-98fe9cf6-4118-464b-85cd-76defbb0b2cd button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Initialize a dictionary to store race results\n",
        "results = {\n",
        "    'season': [],\n",
        "    'round': [],\n",
        "    'circuit_id': [],\n",
        "    'Driver': [],\n",
        "    'dateOfBirth': [],\n",
        "    'Constructor': [],\n",
        "    'grid': [],\n",
        "    'status': [],\n",
        "    'points': [],\n",
        "    'position': []\n",
        "}\n",
        "\n",
        "# URL template for fetching Formula 1 race results\n",
        "url = 'http://ergast.com/api/f1/{}/{}/results.json'\n",
        "\n",
        "# Loop through the years from 1950 to 2019\n",
        "for year in range(1950, 2020):\n",
        "    # Get the list of rounds for the current year\n",
        "    rounds = list(races[races.season == str(year)]['round'])\n",
        "\n",
        "    # Loop through each round in the year\n",
        "    for round in rounds:\n",
        "        # Fetch race results for a specific year and round from the API\n",
        "        response = requests.get(url.format(year, round))\n",
        "        json_data = response.json()\n",
        "\n",
        "        # Iterate over each result in the race\n",
        "        for item in json_data['MRData']['RaceTable']['Races'][0]['Results']:\n",
        "            # Append relevant information to the 'results' dictionary\n",
        "            results['season'].append(json_data['MRData']['RaceTable']['Races'][0]['season'])\n",
        "            results['round'].append(json_data['MRData']['RaceTable']['Races'][0]['round'])\n",
        "            results['circuit_id'].append(json_data['MRData']['RaceTable']['Races'][0]['Circuit']['circuitId'])\n",
        "\n",
        "            # Iterate over each key-value pair in the result item\n",
        "            for key, value in item.items():\n",
        "                # Check if the key is in the 'results' dictionary\n",
        "                if key in results.keys():\n",
        "                    # Handle specific cases for 'Driver', 'Constructor', and 'Time' keys\n",
        "                    if key == 'Driver':\n",
        "                        results['Driver'].append(value['driverId'])\n",
        "                        results['dateOfBirth'].append(value['dateOfBirth'])\n",
        "                    elif key == 'Constructor':\n",
        "                        results['Constructor'].append(value['constructorId'])\n",
        "                    elif key == 'Time':\n",
        "                        results['Time'].append(value['millis'])\n",
        "                    else:\n",
        "                        results[key].append(value)\n",
        "\n"
      ],
      "metadata": {
        "id": "zTThvlyx8l8U"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "results = pd.DataFrame(results)\n",
        "results.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "b6x4YUiJHAGr",
        "outputId": "743c0626-b5ad-4f65-d98b-bba719dd8b4b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  season round   circuit_id       Driver dateOfBirth Constructor grid  \\\n",
              "0   1950     1  silverstone       farina  1906-10-30        alfa    1   \n",
              "1   1950     1  silverstone      fagioli  1898-06-09        alfa    2   \n",
              "2   1950     1  silverstone  reg_parnell  1911-07-02        alfa    4   \n",
              "3   1950     1  silverstone    cabantous  1904-10-08        lago    6   \n",
              "4   1950     1  silverstone       rosier  1905-11-05        lago    9   \n",
              "\n",
              "     status points position  \n",
              "0  Finished      9        1  \n",
              "1  Finished      6        2  \n",
              "2  Finished      4        3  \n",
              "3   +2 Laps      3        4  \n",
              "4   +2 Laps      2        5  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-48db0fe2-0e93-4d45-a2c7-a7dd4bf3a165\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>season</th>\n",
              "      <th>round</th>\n",
              "      <th>circuit_id</th>\n",
              "      <th>Driver</th>\n",
              "      <th>dateOfBirth</th>\n",
              "      <th>Constructor</th>\n",
              "      <th>grid</th>\n",
              "      <th>status</th>\n",
              "      <th>points</th>\n",
              "      <th>position</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1950</td>\n",
              "      <td>1</td>\n",
              "      <td>silverstone</td>\n",
              "      <td>farina</td>\n",
              "      <td>1906-10-30</td>\n",
              "      <td>alfa</td>\n",
              "      <td>1</td>\n",
              "      <td>Finished</td>\n",
              "      <td>9</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1950</td>\n",
              "      <td>1</td>\n",
              "      <td>silverstone</td>\n",
              "      <td>fagioli</td>\n",
              "      <td>1898-06-09</td>\n",
              "      <td>alfa</td>\n",
              "      <td>2</td>\n",
              "      <td>Finished</td>\n",
              "      <td>6</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1950</td>\n",
              "      <td>1</td>\n",
              "      <td>silverstone</td>\n",
              "      <td>reg_parnell</td>\n",
              "      <td>1911-07-02</td>\n",
              "      <td>alfa</td>\n",
              "      <td>4</td>\n",
              "      <td>Finished</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1950</td>\n",
              "      <td>1</td>\n",
              "      <td>silverstone</td>\n",
              "      <td>cabantous</td>\n",
              "      <td>1904-10-08</td>\n",
              "      <td>lago</td>\n",
              "      <td>6</td>\n",
              "      <td>+2 Laps</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1950</td>\n",
              "      <td>1</td>\n",
              "      <td>silverstone</td>\n",
              "      <td>rosier</td>\n",
              "      <td>1905-11-05</td>\n",
              "      <td>lago</td>\n",
              "      <td>9</td>\n",
              "      <td>+2 Laps</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-48db0fe2-0e93-4d45-a2c7-a7dd4bf3a165')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-48db0fe2-0e93-4d45-a2c7-a7dd4bf3a165 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-48db0fe2-0e93-4d45-a2c7-a7dd4bf3a165');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9a01d7f6-e484-4ff6-b78c-133f9e798981\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9a01d7f6-e484-4ff6-b78c-133f9e798981')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9a01d7f6-e484-4ff6-b78c-133f9e798981 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "driver_standings = {'season': [],'round':[],'Driver': [], 'driver_points': [], 'driver_wins': [],'driver_standings_pos': []}\n",
        "# query API\n",
        "url = 'https://ergast.com/api/f1/{}/{}/driverStandings.json'\n",
        "for year in range(1950,2020):\n",
        "  rounds=list(races[races.season == str(year)]['round'])\n",
        "  for round in rounds:\n",
        "    response = requests.get(url.format(year, round))\n",
        "    json = response.json()\n",
        "\n",
        "    for item in json['MRData']['StandingsTable']['StandingsLists'][0]['DriverStandings']:\n",
        "          driver_standings['season'].append(int(json['MRData']['StandingsTable']['StandingsLists'][0]['season']))\n",
        "          driver_standings['round'].append(int(json['MRData']['StandingsTable']['StandingsLists'][0]['round']))\n",
        "          driver_standings['Driver'].append(item['Driver']['driverId'])\n",
        "          driver_standings['driver_points'].append(item['points'])\n",
        "          driver_standings['driver_wins'].append(item['wins'])\n",
        "          driver_standings['driver_standings_pos'].append(item['position'])"
      ],
      "metadata": {
        "id": "jLHJ6DkiDg7t"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# define lookup function to shift points and number of wins from previous rounds\n",
        "\n",
        "def lookup(df, points):\n",
        "    \"\"\"\n",
        "    This function return the same dataframe but the information of the 'points' column is shifted so that it shows the info of the previous round(before the actual race)\n",
        "\n",
        "    df: pandas dataframe\n",
        "    points: Column we want to modify\n",
        "\n",
        "    \"\"\"\n",
        "    #Get the specific column 'points' for each race and its previous round for each driver\n",
        "    df['lookup1'] = df.season.astype(str) + df['Driver'] + df['round'].astype(str)\n",
        "    df['lookup2'] = df.season.astype(str) + df['Driver'] + (df['round']-1).astype(str)\n",
        "    #Join them and keep only the data from the previous round\n",
        "    new_df = df.merge(df[['lookup1', points]], how = 'left', left_on='lookup2',right_on='lookup1')\n",
        "    new_df.drop(['lookup1_x', 'lookup2', 'lookup1_y'], axis = 1, inplace = True)\n",
        "    new_df.rename(columns = {points+'_x': points+'_after_race', points+'_y': points+'_before_race'}, inplace = True)\n",
        "    #The first round will have Na values because there no round 0\n",
        "    new_df[ points+'_before_race'].fillna(0, inplace = True)\n",
        "    return new_df"
      ],
      "metadata": {
        "id": "WvQIw8QzbRv8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "driver_standings=pd.DataFrame(driver_standings)\n",
        "driver_standings = lookup(driver_standings, 'driver_points')\n",
        "driver_standings = lookup(driver_standings, 'driver_wins')\n",
        "driver_standings = lookup(driver_standings,'driver_standings_pos')\n",
        "\n",
        "driver_standings.drop(['driver_points_after_race', 'driver_wins_after_race', 'driver_standings_pos_after_race'],\n",
        "                      axis = 1, inplace = True)"
      ],
      "metadata": {
        "id": "BYe7Ma5k7_j6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Save datasets"
      ],
      "metadata": {
        "id": "cJ7E5HQKAcC6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pd.DataFrame(driver_standings).to_csv(path2+'driver_standings.csv' ,index=False)\n",
        "pd.DataFrame(results).to_csv(path2+'results.csv', index=False)\n",
        "pd.DataFrame(races).to_csv(path2+'races.csv', index=False)"
      ],
      "metadata": {
        "id": "eTv1WC1O83ZA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Process data\n",
        "\n",
        "EXECUTE ML FROM HERE"
      ],
      "metadata": {
        "id": "9kOB7Os5VT0J"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "driver_standings=pd.read_csv(path2+'driver_standings.csv')\n",
        "results=pd.read_csv(path2+'results.csv')\n",
        "races=pd.read_csv(path2+'races.csv')"
      ],
      "metadata": {
        "id": "KNUCoasV1ybf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Combine all datasets"
      ],
      "metadata": {
        "id": "KYSlt0UBf5ol"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df1 = pd.merge(races, results, how='inner',\n",
        "               on=['season', 'round', 'circuit_id'])\n",
        "final_df = pd.merge(df1, driver_standings, how='left',\n",
        "               on=['season', 'round', 'Driver'])"
      ],
      "metadata": {
        "id": "sKLRjJtG8iew"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "We are going to cerate a new variable: Age. It will represent the age of the driver at the moment of the race.\n",
        "\n",
        "Afterthat we can remove the date of bith of the driver and the date of the race"
      ],
      "metadata": {
        "id": "KW1izmrgf9D3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def get_ages(data):\n",
        "    ages=[]\n",
        "    for i in range(len(data)):\n",
        "      birthDate=data.loc[i,'dateOfBirth']\n",
        "      raceDate=data.loc[i,'date']\n",
        "      # Convertir la fecha a objeto datetime\n",
        "      birthDate = datetime.strptime(birthDate, '%Y-%m-%d')\n",
        "      raceDate = datetime.strptime(raceDate, '%Y-%m-%d')\n",
        "\n",
        "      # Calcular la diferencia de años\n",
        "      edad = raceDate.year - birthDate.year\n",
        "\n",
        "      # Ajustar la edad si aún no ha llegado el cumpleaños este año\n",
        "      if (raceDate.month, raceDate.day) < (birthDate.month, birthDate.day):\n",
        "          edad -= 1\n",
        "      ages.append(edad)\n",
        "\n",
        "    return ages"
      ],
      "metadata": {
        "id": "yeIEQpS3KRb_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "final_df['Age']=get_ages(final_df)\n",
        "final_df.drop(['date','dateOfBirth'],axis=1,inplace=True)"
      ],
      "metadata": {
        "id": "MmYTXDNH4daN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Now let's take a look to the null values"
      ],
      "metadata": {
        "id": "uNcMYqGsgRLI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "final_df.isna().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D0buyRg1smLq",
        "outputId": "16b4c609-b71e-43c1-d1d5-2de2f43776dd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "season                                 0\n",
              "round                                  0\n",
              "url                                    0\n",
              "raceName                               0\n",
              "circuit_id                             0\n",
              "lat                                    0\n",
              "long                                   0\n",
              "country                                0\n",
              "Driver                                 0\n",
              "Constructor                            0\n",
              "grid                                   0\n",
              "status                                 0\n",
              "points                                 0\n",
              "position                               0\n",
              "driver_points_before_race           1895\n",
              "driver_wins_before_race             1895\n",
              "driver_standings_pos_before_race    1895\n",
              "Age                                    0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# fill/drop nulls\n",
        "\n",
        "for col in ['driver_points_before_race', 'driver_wins_before_race', 'driver_standings_pos_before_race']:\n",
        "    final_df[col].fillna(0, inplace = True)"
      ],
      "metadata": {
        "id": "V5iDE3EJslIL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "final_df.drop(['url','raceName'], axis=1,inplace=True)"
      ],
      "metadata": {
        "id": "3BRhRobb38Ub"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Now we will convert the categorical variables into dummy variables in order to be used in the following algorithms.\n",
        "\n",
        "There are categorical variables that are not converted into dummy because we are going to discard them. For example the status of the race cannot be used because have information posterior to the race"
      ],
      "metadata": {
        "id": "8tyj3zrpQ2DK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_dum = pd.get_dummies(final_df, columns = ['circuit_id', 'country', 'Constructor'] )\n",
        "\n",
        "for col in df_dum.columns:\n",
        "    if 'nationality' in col and df_dum[col].sum() < 140:\n",
        "        df_dum.drop(col, axis = 1, inplace = True)\n",
        "\n",
        "    elif 'constructor' in col and df_dum[col].sum() < 140:\n",
        "        df_dum.drop(col, axis = 1, inplace = True)\n",
        "\n",
        "    elif 'circuit_id' in col and df_dum[col].sum() < 70:\n",
        "        df_dum.drop(col, axis = 1, inplace = True)\n",
        "\n",
        "    else:\n",
        "        pass\n"
      ],
      "metadata": {
        "id": "GdAU7gmEVWiU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Machine learning"
      ],
      "metadata": {
        "id": "jUI_p-zdWJe2"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "We are going to define a custom funtion to evaluate the model in the test set, because we have to take into account two points.\n",
        "\n",
        "    -First of all, we have to make predictions round by round, we cannot do it in a single time.\n",
        "\n",
        "    -Secondly after making the predictions we have to make some processing, to ensure there is just a single winner\n",
        "    \n",
        "Afetr this, we are going to use the precision score because we want to know the number of instances predicted as true corrected classified.\n",
        "\n",
        "The precision could be misleading in unbalanced datasets because if we predict all False, it will return a \"high\" score but in fact it is a poor classifier. But in this case as the model is going to predict in every round a winner(True), this problem is solved"
      ],
      "metadata": {
        "id": "ziRJhnAjx8nL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def score_classification(model):\n",
        "    \"\"\"\n",
        "    This function computes the average precision in the test set. For each round it takes the corresponding dataset, make predictions with the model and sort the predictions by the porbability 1.\n",
        "    Now the index of the dataset can be interpreted as the positions in the race, so we take the 0 as the winner\n",
        "\n",
        "    model: trained ML model\n",
        "    Return:  average precision in the test set\n",
        "    \"\"\"\n",
        "    year=2018\n",
        "    score = 0\n",
        "    for circuit in df[df.season >= year]['round'].unique():\n",
        "        #X test\n",
        "        test = df[(df.season >= year) & (df['round'] == circuit)]\n",
        "        X_test = test.drop(['Driver', 'position','points','status'], axis = 1)\n",
        "        y_test = test.position\n",
        "\n",
        "        #scaling\n",
        "        X_test = pd.DataFrame(scaler.transform(X_test), columns = X_test.columns)\n",
        "\n",
        "        # make predictions\n",
        "        prediction_df = pd.DataFrame(model.predict_proba(X_test), columns = ['proba_0', 'proba_1'])\n",
        "        #real psoition\n",
        "        prediction_df['actual'] = y_test.reset_index(drop = True)\n",
        "        #sort by porbability\n",
        "        prediction_df.sort_values('proba_1', ascending = False, inplace = True)\n",
        "        prediction_df.reset_index(inplace = True, drop = True)\n",
        "        #La prediccion es el propio orden del dataset porque esta ordenado\n",
        "        prediction_df['predicted'] = prediction_df.index\n",
        "        #1 si es el primero(index 0) y 0 si no\n",
        "        prediction_df['predicted'] = prediction_df.predicted.map(lambda x: 1 if x == 0 else 0)\n",
        "\n",
        "        score += precision_score(prediction_df.actual, prediction_df.predicted)\n",
        "\n",
        "    model_score = score / df[df.season >= year]['round'].unique().max()\n",
        "    return model_score"
      ],
      "metadata": {
        "id": "OLqnpjouV--R"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = df_dum.copy()\n",
        "df.position = df.position.map(lambda x: 1 if x == 1 else 0)\n",
        "\n",
        "#split train\n",
        "\n",
        "train = df[df.season <2018]\n",
        "train=shuffle(train)\n",
        "X_train = train.drop(['Driver', 'position','points','status'], axis = 1)\n",
        "y_train = train.position\n",
        "\n",
        "scaler = StandardScaler()\n",
        "X_train = pd.DataFrame(scaler.fit_transform(X_train), columns = X_train.columns)\n",
        "\n",
        "#define all models and its parameters grid\n",
        "models = {\n",
        "    'RandomForest': (RandomForestClassifier(), {'n_estimators': [180, 200, 220], 'min_samples_split': [11,20,25]}),\n",
        "    'LinearRegression': (LogisticRegression(max_iter=5000, penalty='l2'), {'C': [0.0001,0.001, 0.01]}),\n",
        "    'MLP': (MLPClassifier(max_iter=5000), {'hidden_layer_sizes': [ (124, 32,16), (64, 16), (100), (50),(20)]}),\n",
        "    'GradientBoosting': (GradientBoostingClassifier(), {'n_estimators': [20,50,70, 100], 'learning_rate': [0.01, 0.1, 0.2]}),\n",
        "    'DecisionTree': (DecisionTreeClassifier(), {'max_depth': [None,3, 10, 20], 'min_samples_split': [3, 5, 7]})\n",
        "}\n",
        "\n",
        "# store results\n",
        "model_results = {}\n",
        "#Iterar sobre todos los modelos y sus parametros y guardar los resultados\n",
        "for model_name, (model, param_grid) in models.items():\n",
        "    print(model_name)\n",
        "    grid_search = GridSearchCV(model, param_grid, cv=5, scoring='precision')\n",
        "    grid_search.fit(X_train, y_train)\n",
        "    best_model = grid_search.best_estimator_\n",
        "    # Evaluar en el conjunto de test\n",
        "    score =score_classification(best_model)\n",
        "\n",
        "    # Almacenar resultados\n",
        "    model_results[model_name] = {\n",
        "        'best_params': grid_search.best_params_,\n",
        "        'best_model': best_model,\n",
        "        'best_score': grid_search.best_score_,\n",
        "        'test_score': score\n",
        "    }\n",
        "\n",
        "# Mostrar resultados\n",
        "for model_name, result in model_results.items():\n",
        "    print(f\"Modelo: {model_name}\")\n",
        "    print(f\"Mejores parámetros: {result['best_params']}\")\n",
        "    print(f\"Precision de validación cruzada: {result['best_score']}\")\n",
        "    print(f\"Precision media en el conjunto de test: {result['test_score']}\")\n",
        "    print(\"----\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9EpgXRMDhYB1",
        "outputId": "ae88b86e-aacf-49e4-9edc-f94779719de1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RandomForest\n",
            "LinearRegression\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MLP\n",
            "GradientBoosting\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "DecisionTree\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Modelo: RandomForest\n",
            "Mejores parámetros: {'min_samples_split': 20, 'n_estimators': 200}\n",
            "Precision de validación cruzada: 0.5035464535464536\n",
            "Precision media en el conjunto de test: 0.5714285714285714\n",
            "----\n",
            "Modelo: LinearRegression\n",
            "Mejores parámetros: {'C': 0.001}\n",
            "Precision de validación cruzada: 0.49606393606393606\n",
            "Precision media en el conjunto de test: 0.42857142857142855\n",
            "----\n",
            "Modelo: MLP\n",
            "Mejores parámetros: {'hidden_layer_sizes': 50}\n",
            "Precision de validación cruzada: 0.29315900267543926\n",
            "Precision media en el conjunto de test: 0.42857142857142855\n",
            "----\n",
            "Modelo: GradientBoosting\n",
            "Mejores parámetros: {'learning_rate': 0.1, 'n_estimators': 70}\n",
            "Precision de validación cruzada: 0.5476909405480834\n",
            "Precision media en el conjunto de test: 0.38095238095238093\n",
            "----\n",
            "Modelo: DecisionTree\n",
            "Mejores parámetros: {'max_depth': 10, 'min_samples_split': 7}\n",
            "Precision de validación cruzada: 0.3956323096718465\n",
            "Precision media en el conjunto de test: 0.42857142857142855\n",
            "----\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "names=[]\n",
        "prec=[]\n",
        "for model_name, result in model_results.items():\n",
        "    names.append(model_name)\n",
        "    prec.append(np.round(result['test_score'],2))"
      ],
      "metadata": {
        "id": "7FjY9XYayUjz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "d= {'Model': names, 'Precision': prec}\n",
        "model_prec = pd.DataFrame(d)\n",
        "model_prec.to_csv(path2+'Model_results.csv')"
      ],
      "metadata": {
        "id": "TPs-GhwmyWhB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10,6))\n",
        "plt.bar(names,prec,color='#00ACC1')\n",
        "plt.xlabel('Precision score')\n",
        "plt.ylabel('Models')\n",
        "plt.title('Models precision in test set')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "8QMxfhzhHThi",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 573
        },
        "outputId": "8b269470-4821-48f3-b77a-db89a5f50ffa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "As we can see, There is a bit of difference between the models performance.\n",
        "\n",
        "The MLP is the one with the worst precision, with less than 0.35\n",
        "\n",
        "Considering linear regression and decision tree, they have performed similar, with an f1 of almost 0.45. Then we Gradient boosting which have reach almost 0.5\n",
        "\n",
        "Finally, the best model is the random forest, which has 0.62.\n",
        "\n",
        "This means that more than half of the instances that the model predicts as true (winners) are indeed true and the remaining 38% are false (non-winners). This score may be considered low at first, but we have to keep in mind that the problem is unbalanced, we only have 5% of True classes (1 winner per race out of 20 drivers), so it is actually a very good result."
      ],
      "metadata": {
        "id": "xeY-YRZXylNT"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Now let's analyze the feature importance for each model"
      ],
      "metadata": {
        "id": "No-YeqiVyqmt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "best_random_forest_model = model_results['RandomForest']['best_model']\n",
        "feature_importance=best_random_forest_model.feature_importances_\n",
        "importance={}\n",
        "for i,col in enumerate(X_train.columns):\n",
        "    importance[col]=feature_importance[i]\n",
        "\n",
        "# Ordenar el diccionario por valores en orden descendente\n",
        "sorted_items = sorted(importance.items(), key=lambda x: x[1], reverse=True)\n",
        "# Tomar los cinco primeros elementos\n",
        "top = sorted_items[:7]\n",
        "\n",
        "# Obtener las claves y valores de los cinco elementos\n",
        "top_keys = [item[0] for item in top]\n",
        "top_values = [item[1] for item in top]"
      ],
      "metadata": {
        "id": "mN68clBGeNBR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Visualizar la importancia de las características\n",
        "fig, ax = plt.subplots(figsize=(20, 10))\n",
        "ax.bar(range(len(top_values)), top_values)\n",
        "ax.set_xticks(range(len(top_values)))\n",
        "ax.set_xticklabels(top_keys)\n",
        "ax.set_title('Importancia de las Características en el Modelo de Random Forest')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 859
        },
        "id": "mlLMBhHgeRvD",
        "outputId": "524f0d78-8287-4d0d-f033-6a79181c5165"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x1000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "In this graph we can check the variables that the random Forest consider the most important ones. The most importnat feature is the grid, then they are also very important the features related with the driver standings (points wins and position before the race)"
      ],
      "metadata": {
        "id": "Drx5DqmRzBTy"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "With the following code we can create a dataframe with the featurte importance of each model.\n",
        "\n",
        "We will use it in the dashboard"
      ],
      "metadata": {
        "id": "oTH_6op6yx7T"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model_names=['RandomForest','DecisionTree','GradientBoosting','LinearRegression']\n",
        "df_importances=pd.DataFrame()\n",
        "for i in range(4):\n",
        "    #Take the model\n",
        "    model_name=model_names[i]\n",
        "    best_model = model_results[model_name]['best_model']\n",
        "    #Take the feature importance\n",
        "    if model_name=='LinearRegression':\n",
        "        feature_importance=best_model.coef_[0]\n",
        "    else:\n",
        "        feature_importance=best_model.feature_importances_\n",
        "\n",
        "    importance={}\n",
        "    for i,col in enumerate(X_train.columns):\n",
        "        importance[col]=feature_importance[i]\n",
        "    # Ordenar el diccionario por valores en orden descendente\n",
        "    sorted_items = sorted(importance.items(), key=lambda x: x[1], reverse=True)\n",
        "\n",
        "    #Add a column with model name\n",
        "    sorted_items=pd.DataFrame(sorted_items[:10])\n",
        "    names_df=pd.DataFrame([model_name]*len(sorted_items))\n",
        "    sorted_items=pd.concat([names_df,sorted_items],axis=1)\n",
        "    sorted_items.iloc[:,2]=np.round(sorted_items.iloc[:,2],2)\n",
        "    #Concat with previous models\n",
        "    df_importances=pd.concat([df_importances,sorted_items])\n"
      ],
      "metadata": {
        "id": "JpHL4be3fyLo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_importances.to_csv(path2+'feature_importance.csv')"
      ],
      "metadata": {
        "id": "zzGSLblYywKZ"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}